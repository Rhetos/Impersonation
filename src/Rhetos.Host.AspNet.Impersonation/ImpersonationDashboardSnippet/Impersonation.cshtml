@using Microsoft.AspNetCore.Http
@using Rhetos.Impersonation
@model Rhetos.Utilities.IUserInfo

@inject IHttpContextAccessor httpContextAccessor

@{
	var impersonationInfo = Model as IImpersonationUserInfo;
	var pathBase = httpContextAccessor.HttpContext?.Request.PathBase.Value ?? "";
}

@if (!Model.IsUserRecognized || string.IsNullOrEmpty(Model?.UserName))
{
	@: Not logged in.
}
else if (impersonationInfo == null || !impersonationInfo.IsImpersonated)
{
	@: No impersonation active for '@Model.UserName'
	@: &nbsp; <input id="impersonation-username" placeholder="username" />
	@: &nbsp; <button onclick="impersonate()">Impersonate</button>
}
else
{
	@: '@impersonationInfo.OriginalUsername' is impersonating '@impersonationInfo.UserName'
	@: &nbsp; <button onclick="stopImpersonation()">Stop impersonation</button>
}

<script>
	function stopImpersonation() {
		var xhr = new XMLHttpRequest();
		xhr.open('POST', '@(pathBase + "/rest/Common/StopImpersonating")');
		xhr.onload = function (e) {
			if (xhr.response) {
				alert(JSON.stringify(xhr.response));
			} else {
				window.location.reload();
			}
		};

		xhr.onerror = function (e) {
			alert(e);
		};
		xhr.send();
	}

	function impersonate() {
		var userName = document.getElementById('impersonation-username').value;
		var impersonateModel = {
			'UserName': userName
		};

		var xhr = new XMLHttpRequest();
		xhr.open('POST', '@(pathBase + "/rest/Common/Impersonate")');
		xhr.setRequestHeader('Content-Type', 'application/json');

		xhr.onload = function (e) {
			if (xhr.response) {
				alert(JSON.stringify(xhr.response));
			} else {
				window.location.reload();
			}
		};

		xhr.onerror = function (e) {
			alert(e);
		};

		xhr.send(JSON.stringify(impersonateModel));
	}
</script>
