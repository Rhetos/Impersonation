Module Common
{
	ExternalReference 'Rhetos.Impersonation.ImpersonationContext, Rhetos.Impersonation';

	Action Impersonate
		'(parameters, repository, userInfo) =>
		{
			if (string.IsNullOrWhiteSpace(parameters.UserName))
				throw new Rhetos.ClientException("It is not allowed to call this service method with no parameters provided.");

			var logger = _executionContext.LogProvider.GetLogger("Impersonation");
			Rhetos.Logging.LoggerHelper.Trace(logger, () => "Impersonate: " + userInfo.UserName + " as " + parameters.UserName);

			_impersonationContext.CheckImperionatedUserPermissions(parameters.UserName);
			_impersonationTransport.SetImpersonation(parameters.UserName);
		}'
	{
		RepositoryUses '_impersonationContext' 'Rhetos.Impersonation.ImpersonationContext, Rhetos.Impersonation';
		RepositoryUses '_impersonationTransport' 'Rhetos.Impersonation.IImpersonationTransport, Rhetos.Impersonation';
		
		ShortString UserName;
	}

	Action StopImpersonating
		'(parameters, repository, userInfo) =>
		{
			var logger = _executionContext.LogProvider.GetLogger("Impersonation");
			Rhetos.Logging.LoggerHelper.Trace(logger, () => "StopImpersonating: " + userInfo.UserName);

            _impersonationTransport.RemoveImpersonation();
		}'
	{
		RepositoryUses '_impersonationTransport' 'Rhetos.Impersonation.IImpersonationTransport, Rhetos.Impersonation';
	}
}

CustomClaim 'Common.Impersonate' 'IncreasePermissions';